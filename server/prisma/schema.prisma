generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  ARTIST
  MODERATOR
  ADMIN
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  username        String         @unique
  email           String         @unique
  password        String
  role            Role           @default(VIEWER)
  isVerified      Boolean        @default(false)
  likedPostIds    String[]       @default([]) @db.ObjectId
  likedPosts      Post[]         @relation("likes", references: [id], fields: [likedPostIds])
  favoritePostIds String[]       @default([]) @db.ObjectId
  favoritePosts   Post[]         @relation("favorites", references: [id], fields: [favoritePostIds])
  posts           Post[]         @relation("posts")
  followers       Follower[]     @relation("follower")
  followings      Follower[]     @relation("following")
  lists           List[]
  sentMessages    Message[]      @relation("sender")
  readMessagesId  String[]       @default([]) @db.ObjectId
  readMessages    Message[]      @relation("readBy", fields: [readMessagesId], references: [id])
  conversationsId String[]       @default([]) @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationsId], references: [id])
}

model Post {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  postedBy         User     @relation(name: "posts", fields: [userId], references: [id], onDelete: Cascade)
  likedUserIds     String[] @default([]) @db.ObjectId
  likes            User[]   @relation("likes", references: [id], fields: [likedUserIds])
  favoritesUserIds String[] @default([]) @db.ObjectId
  favorites        User[]   @relation("favorites", references: [id], fields: [favoritesUserIds])
  toPurchase       Boolean  @default(false)
  listsId          String[] @default([]) @db.ObjectId
  lists            List[]   @relation(fields: [listsId], references: [id])
}

model Follower {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  follower    User   @relation(name: "following", fields: [followerId], references: [id])
  followingId String @db.ObjectId
  following   User   @relation(name: "follower", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model List {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  userId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  postsId String[] @default([]) @db.ObjectId
  posts   Post[]   @relation(fields: [postsId], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String       @db.ObjectId
  sender         User         @relation("sender", fields: [senderId], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  deleted        Boolean      @default(false)
  readByUserIds  String[]     @default([]) @db.ObjectId
  readBy         User[]       @relation("readBy", fields: [readByUserIds], references: [id])
}

model Conversation {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  usersId  String[]  @default([]) @db.ObjectId
  users    User[]    @relation(fields: [usersId], references: [id])
  messages Message[]
}
